{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","SetInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GifGridItem","id","title","url","console","log","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gif","map","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","img","key","GifExpertApp","categories","SetCategories","index","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAe9C,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACrCN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAlBQ,SAACP,GACjBF,EAAcE,EAAEQ,OAAOF,YCJlBG,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAErC,OADAC,QAAQC,IAAI,CAAEJ,KAAIC,QAAOC,QAErB,yBAAKG,UAAU,0CACX,yBAAKC,IAAKJ,EAAKK,IAAKN,IACpB,2BAAIA,K,uBCPHO,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbR,EADa,iDACmCS,UAAUF,GAD7C,+DAEAG,MAAMV,GAFN,cAEbW,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAMD,EAAKE,KAAI,gBAAGjB,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOiB,EAAd,EAAcA,OAAd,MACjB,CACIlB,KACAC,QACAC,IAAG,OAAEgB,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBjB,QATnB,kBAYZc,GAZY,4CAAH,sDCMPI,EAAU,SAAC,GAAkB,IAAhBX,EAAe,EAAfA,SAAe,ECHb,SAACA,GAAc,IAAD,EACZvB,mBAAS,CAC/B6B,KAAM,GACNM,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KActC,OATAC,qBAAU,WACNhB,EAAQC,GACHgB,MAAK,SAAAC,GACFH,EAAS,CACLR,KAAMW,EACNL,SAAS,SAGtB,CAACZ,IACGa,EDT2BK,CAAalB,GAAjCS,EAFuB,EAE7BH,KAAcM,EAFe,EAEfA,QAEtB,OACI,oCACI,4BAAKZ,GACJY,GAAW,sCACZ,yBAAKhB,UAAU,aAGPa,EAAOD,KAAI,SAAAW,GAAG,OACV,kBAAC,EAAD,eACIC,IAAKD,EAAI5B,IACL4B,UEKjBE,EArBa,WAAO,IAAD,EAEM5C,mBAAS,CAAC,SAFhB,mBAEvB6C,EAFuB,KAEXC,EAFW,KAI9B,OACI,oCACI,6CAEA,6BACA,kBAAC,EAAD,CAAa/C,cAAe+C,IAC5B,4BAEQD,EAAWd,KAAI,SAACR,EAAUwB,GAAX,OACX,kBAAC,EAAD,CAASxB,SAAUA,EAAUoB,IAAKI,EAAQxB,U,MCTlEyB,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.d1e821c3.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    const [inputValue, SetInputValue] = useState('')\r\n    const handleInput = (e) => {\r\n        SetInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cat => [inputValue, ...cat]);\r\n            SetInputValue('');\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type='text'\r\n                value={inputValue}\r\n                onChange={handleInput} />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n    console.log({ id, title, url });\r\n    return (\r\n        <div className='card animate__fadeIn animate__delay-5s' >\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=uqIRTYSW4Dmg8ExIX81izBZ79v35AJII`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gif = data.map(({ id, title, images }) => (\r\n        {\r\n            id,\r\n            title,\r\n            url: images?.downsized_medium.url\r\n        }\r\n    ))\r\n    return gif;\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p>Loading</p>}\r\n            <div className='card-grid'>\r\n\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            });\r\n    }, [category])\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, SetCategories] = useState(['goku'])\r\n\r\n    return (\r\n        <>\r\n            <h1>Gif Expert Ap</h1>\r\n\r\n            <hr />\r\n            <AddCategory setCategories={SetCategories} />\r\n            <ol>\r\n                {\r\n                    categories.map((category, index) => (\r\n                        <GifGrid category={category} key={index + category} />\r\n                    )\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css'\n\n\n\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}